version: 3

output: prefixed

# NOTES:
# ------
# This task copies the cmd/goproject files to build/[project name] You
# will need to modify the module github.com/imarsman/goproject path in the
# resulting go.mod file to fit the proper root for whatever your project's
# module root path is. If you are not using a network accessible project git
# root substitute a simple project name, or else substitute the new git root.
# You will need to replace the project root in any .go files in the project as
# well. After you make these modifications you will need to run `go mod vendor`
# to download dependencies. The project comes with a sample Taskfile.yml. You
# will need to modify it to suit the build requirements of the project but it
# works fine for the base code.

# This task should run on Linux and MacOS but has not been tested on Windows. It
# may work on Windows using the Ubuntu subsystem. You can find more about the
# taskfile project at https://taskfile.dev The layout for the project structure
# is based loosely on
# https://github.com/golang-standards/project-layout

vars:
  # Get a variable to define the root path for later
  ROOT:
    sh: pwd

tasks:
  default:
    desc: | 
      Generate a base application layout with app name specified by
        - task APP_NAME="[yourappname]" 
        The result will be a zipped or tar gzipped directory structure in 
        - build/builds/[yourappname]/
    cmds:
      - task: clean
      - echo "Creating project package for {{.APP_NAME}}"
      # Clear out existing dirs for app
      - rm -rf build/{{.APP_NAME}} || true
      # Add in base dirs
      - mkdir -p build/{{.APP_NAME}}/cmd/{{.APP_NAME}}/build/
      - mkdir -p build/{{.APP_NAME}}/deployments
      - mkdir -p build/{{.APP_NAME}}/test/{{.APP_NAME}}
      - mkdir -p build/{{.APP_NAME}}/basefiles/{{.APP_NAME}}
      - touch build/{{.APP_NAME}}/deployments/docker-compose.yml
      - mkdir -p build/{{.APP_NAME}}/tools
      # Copy all starter project files to destination
      - cp -r cmd/goproject/ build/{{.APP_NAME}}/
      - mkdir -p build/{{.APP_NAME}}/cmd/{{.APP_NAME}}/internal
      # Copy top-level internal package files to dest internal package
      - cp -r internal build/{{.APP_NAME}}/internal
      # Add in .keep files to ensure that new git repo will have dirs.
      - find build/{{.APP_NAME}} -type d -empty -exec touch {}/.keep \;
      - task: mod
      - task: package
      # Clean up build files
      - task: clean
    preconditions:
      - sh: "[ '{{.APP_NAME}}' != '' ]"
        msg: APP_NAME must be given. e.g. task APP_NAME="test"

  mod:
    dir: build/{{.APP_NAME}}
    cmds:
      - go mod init {{.APP_NAME}}

  package:
    dir: build/
    cmds:
      - zip -r {{.APP_NAME}}.zip {{.APP_NAME}}
      - tar -cvzf {{.APP_NAME}}.tar.gz {{.APP_NAME}}

  clean:
    cmds:
      - rm -rf build/{{.APP_NAME}}/ || true
